# only applies to invoices in the ISIC industry of G4711 - retail petrol
WHEN envelope:type == "invoice";
WHEN envelope:parties.supplier.industry.list_id == "ISIC";
WHEN envelope:parties.supplier.industry.value == "G4711";

# only applies to items classified as UNSPSC 506505 (petrol)
WHEN item:classification.list_name == "UNSPSC";
WHEN item:classification.value == "506505";
WHEN item:quantity.value > 0;

# load tables that add additional information
REQUIRE ca.qc.tax:station_distances:0.0.1 AS distances;
REQUIRE ca.qc.tax:reductions_by_distance:0.0.1 AS reductions_by_distance;

# build a table that contains the seller information joined against the predefined
# reductions table. This yields a table in the form:
#
# [{ reduction, distance, seller_distance }]
#
# if we suppose that there are 3 distances (1km, 2km, 3km) with
# reductions and the seller distance is 1.3 km, the resulting table
# will be:
#
# [
#   { 1, 0.02, 1.3 },
#   { 2, 0.04, 1.3 },
#   { 3, 0.06, 1.3 }
# ]
#
ASSEMBLE sellers_distances
  COLUMNS FROM reductions_by_distance
  COLUMN seller_distance FROM distances WHEN envelope:parties.suppler.id.value == supplier_id;

# Builds a table of reductions based on distances, removing any negative rows
# because they are outside of the reduction distance. This yields a new table
# called sellers_reductions that includes the reduction percentage for the
# seller. The resulting table is
#
# [
#   { 1, 0.02, 1.3, -.3  },
#   { 2, 0.04, 1.3, .7  },
#   { 3, 0.06, 1.3, 1.7 }
# ]
#
REFINE sellers_distances AS sellers_reductions
  MAP difference = subtract(distance, seller_distance);

# we need a second REFINE because FILTER applies before MAP, so it cannot be
# used in combination in the previous REFINE. After filtering, we calculate the
# min_difference to determine the closest reduction for the seller. This yields:
#
# [
#   { 2, 0.04, 1.3, .7, .7 },
#   { 3, 0.06, 1.3, 1.7, .7 }
# ]
#
REFINE sellers_reductions AS applicable_sellers_reductions
  FILTER difference >= 0
  MAP min_difference = min(min_difference, difference);

# Refine to filter out the row which has the minimal difference
REFINE applicable_sellers_reductions AS final_sellers_reductions
  FILTER difference == min_difference;

# This create a new table that includes the relevant fields from the
# items table, joining the reduction from above.
ASSEMBLE item_reductions
  COLUMNS (id, classification, price) FROM items
    WHEN classification.list_name == "UNSPSC"
    WHEN classification.value == "506505"
  COLUMN reduction FROM final_sellers_reductions;

# Adds the UBL-ish allowance to the item table that we computed above.
# NOT PARSING due to dotted key path on left
REFINE item_reductions AS applicable_reductions
  MAP allowance.charge = "false"
  MAP allowance.amount.value = multiply(price.value, reduction)
  MAP allowance.amount.currency_code = price.currency_code;

# This issues a revision of the original items table, adding the
# allowance column.
REVISE items
  ADD allowance FROM applicable_reductions;